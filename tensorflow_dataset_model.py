# -*- coding: utf-8 -*-
"""Tensorflow Dataset Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WO5XraocsuxkXcPOM9YcU1G-uI1-12rL
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense

tfds.list_builders()

ds = tfds.load('mnist', split='train', shuffle_files=True)
assert isinstance(ds, tf.data.Dataset)

(train_images, train_labels), (test_images, test_labels) = tfds.as_numpy(tfds.load('mnist',
              split = ['train', 'test'],
              batch_size=-1,
              as_supervised=True))

# Build a CNN model for image classification (e.g., MNIST)
model = Sequential([
    # Input layer for 28x28 grayscale images (1 channel)
    Input(shape=(28, 28, 1)),

    # First convolutional block: Conv + MaxPooling
    Conv2D(32, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    # Second convolutional block
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    # Third convolutional block
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    # Flatten the 3D output to 1D for the dense layers
    Flatten(),

    # Fully connected hidden layers
    Dense(64, activation='relu'),
    Dense(128, activation='relu'),

    # Output layer for 10-class classification
    Dense(10, activation='softmax')
])

model.compile(
    optimizer=tf.keras.optimizers.RMSprop(),
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy'],
)

model.fit(train_images, train_labels, batch_size=32, epochs=5)

model.evaluate(test_images, test_labels, batch_size=1)